{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPS-BoldMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 CourierNewPSMT;\f4\fswiss\fcharset0 ArialMT;\f5\fswiss\fcharset0 Arial-BoldMT;
\f6\froman\fcharset0 TimesNewRomanPS-ItalicMT;\f7\froman\fcharset0 Times-Roman;\f8\ftech\fcharset0 Wingdings-Regular;
\f9\fswiss\fcharset0 Helvetica;\f10\fnil\fcharset222 Ayuthaya;\f11\fmodern\fcharset0 CourierNewPS-BoldMT;
\f12\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red60\green64\blue68;\red255\green255\blue255;\red77\green80\blue85;
\red25\green162\blue221;\red11\green76\blue180;\red0\green0\blue0;\red72\green72\blue72;\red36\green64\blue132;
}
{\*\expandedcolortbl;;\cssrgb\c30196\c31765\c33725;\cssrgb\c100000\c100000\c100000;\cssrgb\c37255\c38824\c40784;
\cssrgb\c5821\c69898\c89230;\cssrgb\c1961\c38824\c75686;\cssrgb\c0\c0\c0\c84706;\cssrgb\c35294\c35294\c35294;\cssrgb\c18431\c32941\c58824;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww25960\viewh20220\viewkind0
\deftab720
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Enterprise Application Integration\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 If you have disparate technologies like Java, DB, SAP etc in order to integrate in a single secure manner you need EAI\
ESB is how to implement the concept of EAI. \uc0\u8232 Advantages are message transformation, message routing, message enrichment, protocol conversion. \u8232 CastIron (Cloud ESB) + IIB = ACE/ACP (ACP is on the Cloud). Upto V9 WMB you could run older versions of WMB code and WESB. IBM Integration Bus represents the IBM strategic Enterprise Service Bus offering and is the successor product for existing clients of both IBM WebSphere Message Broker and IBM WebSphere Enterprise Service Bus. From V10 IIB does not need MQ but now can install MQ on a separate server and connect remotely. IIB (V10) has Salesforce and NoSQL database connectivity.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Message Transformation\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Application A produces XML format, but Application B accepts JSON\
A -XML-> ESB -JSON-> B\
Formats include XML, JSON, SOAP, CSV, TAG delimited\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Message Routing\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Application A -XML-> ESB -> B (XML)\
Application A -JSON-> ESB -> C (JSON)\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 Suppose you have a Route node preceding the RCD node. Within it you can set XPaths. These are used to extract the header information. In the Postman request you can set the content type to XML or JSON. Then the XPath dictates which node to propagate to. It might send the message to the RCD where the domain is set.
\f1\fs32 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Message Enrichment\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Application A -Hi-> ESB (adds \'91how are you?\'92) -> B (Hi how are you?)\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Protocol conversion (MQ, File, http, SOAP, SMTP, POP3, JMS, SFTP)\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Application A -HTTP-> ESB (HTTP to FTP) -> B (FTP)\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 SOA (Service Oriented Architecture)\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Reusable service, loosely coupled, independent SOAP API based on XML. REST API based on JSON\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Toolkit\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 IIB only needs MQ if you are using MQ nodes. Before IIB v9 it was called WMB where MQ is a prerequisite. The QMGR contains Integration Node configuration. IIB v10 MQ is not a prerequisite. Right click on the Application -> New message flow name LargeMessages\
\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 ESQL native to IIB\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Before you create your ESQL message flow you package it into a schema. An example schema is com.test.tran. This concept is akin to JAVA packages. An Integration Project's resources are reusable, but an Application's resources are contained and hence isolated.\
CREATE COMPUTE MODULE XMLToJsonMsgFlow_Compute\
\pard\pardeftab720\li400\fi-400\ri400\sa320\partightenfactor0
\cf0 "CREATE MODULE" creates a module, which is a named container associated with a node. Modules, functions & procedures contained by a schema must all have unique names.\uc0\u8232 Modules for the Compute node, database node & filter node must all contain exactly 1 function called Main. This function should return a Boolean. Main is the entry point used by a message flow node when processing a message.\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
CREATE COMPUTE MODULE FileNode1_Compute\
\'a0\'a0\'a0\'a0\'a0\'a0 CREATE FUNCTION Main() RETURNS BOOLEAN\
\'a0\'a0\'a0\'a0\'a0\'a0 BEGIN\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 -- CALL CopyMessageHeaders(); // This will only copy the Properties & MQMD. NOT the XMLNSC as I < J.\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 -- CALL CopyEntireMessage();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 RETURN TRUE;\
\'a0\'a0\'a0\'a0\'a0\'a0 END;\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0 CREATE PROCEDURE CopyMessageHeaders() BEGIN\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE I INTEGER 1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0DECLARE J INTEGER CARDINALITY(InputRoot.*[]);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 WHILE I < J DO\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET OutputRoot.*[I] = InputRoot.*[I];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET I = I + 1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 END WHILE;\
\'a0\'a0\'a0\'a0\'a0\'a0 END;\
\'a0\
END MODULE;\
\
\pard\pardeftab720\partightenfactor0

\f4\fs28 \cf2 \cb3 The 
\f5\b \cf4 COALESCE
\f4\b0 \cf2  function evaluates its parameters in order and returns the first one that is not NULL
\f3\fs26\fsmilli13333 \cf0 \cb1 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 CARDINALITY returns the number of elements in a list; here the correlation InputRoot is pointing to the message tree which contains the Properties, MQMD and XMLNSC so CARDINALITY is 3. InputRoot is a field reference with a [] array indicator.\
InputRoot.*[] allows you to refer to the array of all children of the root element using a path element of *\
InputRoot.*[<] last child of root of the input message. As you can see from the diagram it is Body. The last child element beneath the root of the message tree is always the message body. For example, XMLNSC or JSON.\
InputRoot.*[1] first child of the root of the input message i.e. the message properties.\
\'a0\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f0\b\fs36 \cf0 Difference between DECLARE varName CHAR FIELDNAME() & DECLARE varName REFERENCE TO
\f1\b0\fs32 \
\pard\pardeftab720\ri2000\sa320\partightenfactor0
\cf0 If your JSON looks like \
\{\'93root\'94:\{\
		\'93Number1\'94:4,\
		\'93Number2\'94:2,\
		\'93MathOp\'94:\'94+\'94,\
		\}\
\}\

\f3\fs26\fsmilli13333 DECLARE InRef REFERENCE TO InputRoot.JSON.Data.root;
\f1\fs32  \
The InRef is a reference variable pointing to part of the message tree (root).\

\f3\fs26\fsmilli13333 DECLARE mathOp CHAR InRef.MathOp;
\f1\fs32  \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 mathOp is +\
\
\pard\pardeftab720\li800\fi-800\ri800\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 DECLARE Operation CHAR FIELDNAME(InRef.*[<]);
\f1\fs32 \
\pard\pardeftab720\ri2000\sa320\partightenfactor0
\cf0 The FIELDNAME returns the name of the field identified by source_field_reference inside () as a character value. If the parameter identifies a nonexistent field, NULL is returned. Operation is now MathOp (a string of type CHAR). \
\
\pard\pardeftab720\ri2400\sa320\partightenfactor0

\f0\b\fs36 \cf0 The MOVE statement
\f1\b0\fs32 \
\pard\pardeftab720\li800\fi-800\ri2400\sa133\partightenfactor0
\cf0 \'a0 
\f3\fs26\fsmilli13333 MOVE InMgrref NEXTSIBLING REPEAT TYPE NAME;
\f1\fs32 \
\pard\pardeftab720\ri3600\sa320\partightenfactor0
\cf0 \'a0This moves InMgrref in the direction of the next sibling relative to the current position if there is a sibling. If not LASTMOVE returns false. The TYPE and NAME clauses mean target is moved to a field with the given type, name. Fields that do not match the criteria are skipped over.\
\pard\pardeftab720\ri3600\sa320\partightenfactor0

\f0\b\fs36 \cf0 LEAVE statement
\f1\b0\fs32 \
\pard\pardeftab720\li800\fi-800\ri4000\sa133\partightenfactor0
\cf0 The LEAVE statement stops the current iteration of the containing WHILE, REPEAT, LOOP, or BEGIN statement identified by Label. The containing statement's evaluation of its loop condition (if any) is bypassed and looping stops.\
\pard\pardeftab720\li400\fi-400\ri4000\sa133\partightenfactor0
\cf0 Syntax\
LEAVE 
\f6\i Label
\f1\i0 \
Examples\
In the following example, the loop iterates four times:\
\'a0\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 DECLARE i INTEGER;\
SET I = 1; \
X: REPEAT\
\'a0\'a0\'a0\'a0 IF i>= 4 THEN LEAVE X;\
END IF;\
SET i = i + 1;\
UNTIL\
\'a0\'a0\'a0\'a0 FALSE\
END REPEAT;\
\pard\pardeftab720\ri2000\sa320\partightenfactor0

\fs24 \cf0 \'a0
\f1\fs32 \
\pard\pardeftab720\ri400\sa320\partightenfactor0
\cf0 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 A field reference consists of a correlation name, followed by 0 or more Path Elements separated by periods (.). The correlation name identifies a well-known starting point and must be the name of a constant. a declared variable, or one of the predefined start points; for example, InputRoot. The InputRoot is the root of the input message. The OutputRoot is the root of the output message. Message trees could refer to the input message or output message. The tree structure created by the parsers is independent of any message format (e.g. XML). The exception to this is the subtree created as part of the message tree to represent the message body. For example, XMLNSC, JSON or DFDL.\
Message Tree structure is populated with the contents of the input message bit stream. It has a root element InputRoot. Each tree is made up of elements. Root has a number of child elements.\
The Compute node has an input message assembly and at least 1 output message assembly. Configure the Compute node to determine which trees are included in the output message assembly. If you want the output message assembly to contain a complete copy of the input message tree, you can code a single ESQL SET statement to make the copy.\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0 CREATE PROCEDURE CopyEntireMessage() BEGIN\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET OutputRoot = InputRoot;\
\'a0\'a0\'a0\'a0\'a0\'a0 END;\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 \'a0\
\pard\pardeftab720\ri400\sa320\partightenfactor0
\cf0 This procedure copies the entire contents of the input message tree (Properties, MQMD & XMLNSC for example which are the header and payload) to the output message.\
If you want the output message to contain a subset of the input message tree, code ESQL to copy those parts only.\
\pard\pardeftab720\li1200\fi-1200\ri1200\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET OutputRoot.XMLNS.ResAdd.sp1:addC=InputRoot.XMLNSC.sp1:ReqAdd.sp1:intA + InputRoot.XMLNSC.sp1:ReqAdd.sp1:intB;
\f1\fs32 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 The message tree is always present and is passed from node to node in a single instance of a message flow. The message tree includes all the headers, in addition to the message body.\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 The header of the message tree is the Properties & MQMD. The payload is the XMLNSC in the diagram and is also called the Body tree which is a structure of child elements that represents the message content (data) and reflects the logical structure of that content. The body tree is created by a body parser. Each element in the parsed tree is either a name, value or name-value element.\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 Inside the main function after the 2nd call:\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0 \
CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');\
 CREATE FIELD OutputRoot.JSON.Data;\
\'a0\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 LASTCHILD is a type of FIELD clause. "CREATE LASTCHILD OF" target navigates to the target field and adds a new field as it's rightmost child, displacing the previous last child to the left. The DOMAIN('JSON') associates the new field with a new parser of the specified type i.e. JSON.
\f3\fs26\fsmilli13333 \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
 DECLARE outref REFERENCE TO OutputRoot.JSON.Data;\
 CREATE FIELD outref.Purchases IDENTITY (JSON.Array)Purchases;\
SET outref.Purchases.Item[1].Description = inRef.Description;\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0 -- This creates JSON message under the Data element owned by JSON parser root. This creates a child element of the OutputRoot\
\'a0\'a0\'a0\'a0\'a0\'a0 -- as a JSON. Since the JSON tree structure is JSON and data this assigns InputRoot.XMLNSC to OutputRoot.JSON.Data.\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 \'a0\
You can manipulate messages that belong to the JSON domain, which are parsed by the JSON parser. The code transforms the OutputRoot message to JSON. The OutputRoot... statement produces a message tree.\
\'a0\
If you include a FIELD clause the field specified by TARGET is navigated to.\
\'a0\
SET assigns a value to a variable.\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 XMLNSC parser is guided by the XML Schema (describes the shape of the message tree which is a logical model). XMLNSC is the preferred domain for parsing all XML because of it's high performance, reduced memory used by the logical message tree created from the parsed message; which has discarded non-significant whitespace, mixed content, comments, processing instructions & embedded DTDs. XMLNSC parser can operate as a model-driven parser and can validate XML messages against XML schemas, to ensure XML messages are correct.\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Local, UDP (AKA External) & shared variables\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Local variable scope is within the Compute node. UDP scope is throughout the message flow. Shared scope is through the execution group AKA the Integration Server even if the message flow completes. When the next transaction starts the shared variable is available.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 MQInputNode mode. How your messages will be processed\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Under Properties then Advanced there is a Transaction mode which relates to how your messages are going to be processed.\
\pard\pardeftab720\li1200\fi-1200\ri1200\sa133\partightenfactor0
\cf0 This could be Yes (message is received but if there is an exception the original message will go to a backout queue; which if defined is at the queue level or DLQ; defined at QMGR level else it will loop), No or Automatic. Imagine there is a problem in the compute node or suppose the queue on the MQ output has a problem then the message will go to the backout queue defined at queue level. If not defined, then it goes to DLQ defined at QMGR level. If no DLQ then continuous loop. An exception could occur if the wrong data source is defined at the Compute Node in between the MQInputNode and MQOutputNode. The MQInputNode has a Basic tab under properties which has a Queue Name field. If say IN.LQ is the value of that field then you need to define the backout queue for that queue using MQ Explorer.\
\pard\pardeftab720\ri800\sa320\partightenfactor0
\cf0 Yes: If you select Yes, the incoming message is received under sync point.\
\pard\pardeftab720\li1200\fi-1200\ri800\sa133\partightenfactor0
\cf0 The syncpoint is defined as below:\
\pard\pardeftab720\li2000\fi-2000\ri1200\sa133\partightenfactor0
\cf0 \'a0\'a0\'a0 The decision to commit or back out the changes is taken, in the simplest case, at the end of a task. However, it can be more useful for an application to synchronize data changes at other logical points within a task. These logical points are called sync points (or synchronization points) and the period of processing a set of updates between two sync points is called a unit of work. Therefore, a unit of work is named as processing between two sync points. From my understanding, that unit of work is a transaction actually.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 \
\pard\pardeftab720\ri1200\sa320\partightenfactor0
\cf0 No: If there is a problem in the compute node or suppose the queue on the MQ output has a problem then the message won\'92t go anywhere. It will be lost.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 IIB Node Connecting to Database using ODBC pt1\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Use the command console to associate a DSN with a broker instance. You create an ODBC connection to the data source DBNAME with the command:\
mqsisetdbparms IB9BROKER -n DBNAME -u -p\
You now need to reload the configuration since the new association of DBNAME to IB9BROKER:\
mqsireload IB9BROKER\
Then check the connection using \'93mqsicvp IB9BROKER -n DBNAME\'94\
\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 IIB Node Connecting to Database using ODBC pt2\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\b0\fs32 \cf0 IIBGURU entered:\
\
$ db2start\
$ db2\
db2 => connect to sample\
db2 => SELECT * FROM EMPLOYEE\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 \
Create a new Application name DBINTER_APP. Then right click on DBINTER_APP then create a message flow DBINTER_MF. From the palette add MQInput and MQOutput nodes. In between add some ESQL in a Compute node. MQInput out connects to the in of the Compute node. Compute out connects to the in of the MQOutput node. MQInput node will use the XMLNSC parser to read XML records\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a09001\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 TRUMP\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 New York\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 \uc0\u8232 \'85that will be INSERTED into DBNAME. The Compute node has Data Source DBNAME. Double click on the node to bring up the ESQL editor. \
\uc0\u8232 Uncomment \'97 CALL CopyMessageHeaders(); so that we can send a success message to the out queue. \u8232 Compare\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 INSERT INTO EMPLOYEE VALUES(101,\'92IIBGURU\'92,\'92CALIFORNIA\'92)\
\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 \uc0\u8232 With what we use in ESQL Compute Node.\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 INSERT INTO Database.iibguru.EMPLOYEE VALUES(InputRoot.XMLNSC.EMPLOYEE.ENO, InputRoot.XMLNSC.EMPLOYEE.ENAME, InputRoot.XMLNSC.EMPLOYEE.ECITY);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'97 You can use CTRL space to have content assist help with the syntax\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 The above could be written as:\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE InRef REFERENCE TO InputRoot.XMLNSC.EMPLOYEE;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0INSERT INTO Database.iibguru.EMPLOYEE VALUES(InRef.ENO, InRef.ENAME, InRef.ECITY);\
\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 We are getting the values from the Input message tree where the domain is XMLNSC, EMPLOYEE is the root child. \'93Database\'94 is a keyword & the iibguru is the schema in which EMPLOYEE table exists. Here the schema is the user name. It will use the user name as the schema if you have not created the schema before creating a table in the database.\uc0\u8232 \u8232 \u8232 \u8232 When you save the ESQL in the Compute node you get a warning \'93Unresolvable database table reference \'91Database.iibguru.EMPLOYEE\'92\'94. This is because it only resolves and finds EMPLOYEE during execution. The successive command after the INSERT will only run if the INSERT executes correctly. It is:\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET OutputRoot.XMLNSC.DBINSERT.STATUS=\'91SUCCESS\'92;\
\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 Introduce a breakpoint after the MQInput. Since you have the breakpoint you have to launch the debugger (right click on execution group) then add a message from the XML file using RFHUTIL. In the Data tab of the RFHUTIL you can parse the file to see if it is syntactically correct under Data Format. Once you write the XML file to the IN queue the Debug perspective is automatically launched. You will see multiple threads. Thread suspended at DBINTER_MF at connection. You can click on the \'91Edit Source Lookup Path\'92 button. From there you add a container to the source lookup path. Since we are running a MF we choose the Message Flow Container, choose our DBINTER_APP application which contains our message flow. Under Variables you can see the Message. As you know the Message has Properties then MQMD then Other headers then the Body which has\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0XMLNSC\'a0\'a0\'a0 |\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 V\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 EMPLOYEE|\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 V\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ENO (9001), ENAME (TRUMP), ECITY(New York)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 We can go inside the scope of the Compute node by clicking on the thread in the Debug perspective, then click on Step into code icon which will open up the ESQL of the next Compute node. You will reach the CALL CopyMessageHeaders(); You can then click on the Step over icon which will run the CALL then take you to the INSERT. The CALL will copy the headers to the output. EVEN though the INSERT has been executed the change has not been committed to the database. This is because the \
\

\f3\fs26\fsmilli13300 INSERT INTO\'85.\
SET OutputRoot\'85 \
RETURN TRUE;
\f1\fs32 \
\
Are considered as 1 unit of work. Only until every command in the ESQL happens without error & the \ul whole flow\ulnone  completes will the INSERT be committed. Else a rollback will occur. This is controlled by the Transaction property of the Compute node. The possible values are Automatic (default) or Commit. The latter will commit the INSERT once the Compute node completes successfully. It will not wait for the whole flow to complete.\
\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 PATH AREA.CIRCLE # 
\f1\b0 this allows you to reference ESQL in another broker schema
\fs32 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Oracle DB ESQL\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 \uc0\u8232 DSN TEST_DSN, Schema is SYSTEM\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 DECLARE EMP ROW;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'97 ROW is a datatype that holds a tree structure\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET EMP.Result[] = SELECT * FROM Database.SYSTEM.EMP_DETAILS AS R WHERE R.EMPID=InRef.id;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 We then send this XML: \uc0\u8232 
\f3\fs26\fsmilli13333 SET OutputRoot.JSON.Data.Employee.ID = EMP.Result.EMPID; //only works with a single value not multiple
\f1\fs32 \
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f0\b\fs36 \cf0 PASSTHRU with EVAL
\f1\b0\fs32 \
\
https://youtu.be/0CX9--Y2jOk?si=0Mx5cJC8IDdW2GL1\
\
Example of PASSTHRU where there are 2 procedures with the same name but in ESQL files contained in different schemas. How can we invoke them dynamically at runtime? We can use EVAL to run the procedure that is connected to a key value in some incoming XML or JSON. For example if the value is Professional then invoke the EmpDetails procedure in the Pro schema. If it is Personal invoke the EmpDetails in the Personal schema. https://youtu.be/0CX9--Y2jOk:\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET Emp.EmpRecord[] = PASSTHRU(\cb5 \outl\strokewidth60 \'91SELECT * FROM EMPLOYEE WHERE EMPNO=\'92\cb1 \outl0\strokewidth0 ||\'92\'92\'92\'92||EmpID||\'92\'92\'92\'92);
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 SET Emp.EmpRecord[] = PASSTHRU('SELECT * FROM EMPLOYEE WHERE EMPNO='||''''||EmpID||'''');\uc0\u8232 \u8232 DECLARE DbRecords REFERENCE TO Emp.EmpRecord;\u8232 \u8232 CREATE FIELD OutputRoot.JSON.Data.Employee.\{EmpInFoType\};\u8232 DECLARE outDetailsRef REFERENCE TO OutputRoot.JSON.Data.Employee.\{EmpInFoType\};\u8232 \u8232 IF CONTAINS(EmpInFoType, 'Professional') THEN\u8232 SET SchemaName = 'EmpProDet';\u8232 ELSEIF CONTAINS(EmpInFoType, 'Personal') THEN\u8232 SET SchemaName = 'EmpPersonDet';\u8232 END IF;\u8232 \u8232 EVAL('CALL '||SchemaName||'.EmpDetails(outDetailsRef, DbRecords);');\u8232 \u8232 RETURN TRUE;\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 This video also shows you how to use EVAL. (https://youtu.be/0CX9--Y2jOk?si=h0r2PTL2h-y_qw-x). EVAL saves you from having to write lots of if statements by evaluating the expression on the fly using variables.\
\'a0\
Example:\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET OutputRoot.JSON.Data.Result = EVAL('num1'||mathop||'num2');\
\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 Instead of:\
\
IF mathop = \'91+\'92 THEN\
	SET 
\f3\fs26\fsmilli13333 OutputRoot.JSON.Data.Result = num1 + num2;
\f1\fs32 \
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f0\b\fs36 \cf0 Shared variable and ATOMIC block\
\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\b0\fs32 \cf0 https://youtu.be/u5-r4H6PvIY?si=kVKM9JrdJnXVlj6p\
\pard\pardeftab720\li1200\fi-1200\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0
\f1\fs32 \

\f3\fs26\fsmilli13333 DECLARE MYROW ROW; --A row variable contains an array
\f1\fs32 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f0\b\fs36 \cf0 \'a0
\f1\b0\fs32 \
ROW SHARED variables can hold complex tree structure. A shared ROW can contain the result of a SELECT on the database table being cached.\
\'a0\
\pard\pardeftab720\li1200\fi-1200\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 DECLARE CACHE SHARED ROW; --For example, a database table called \'93AIRPORTS\'94 contains two columns, \'93CODE\'94 and \'93CITY\'94. This code loads the cache:
\f1\fs32 \

\f3\fs26\fsmilli13333 SET CACHE.AIRPORT[] = SELECT A.CODE, A.CITY FROM Database.AIRPORTS AS A;\'a0
\f1\fs32 \
\pard\pardeftab720\li400\fi-400\ri800\partightenfactor0
\cf0 \'a0\
The CACHE variable will be populated like this:\
-- CACHE.AIRPORT[1].CODE = AAA\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 -- CACHE.AIRPORT[1].CITY = Anaa\
-- CACHE.AIRPORT[2].CODE = AAB\
-- CACHE.AIRPORT[2].CITY = Arrabury\
\'a0\
Accessing ROW SHARED variables is much faster than retrieving the data from the Database directly depending the amount of data retrieved. The first time after the ESQL code is run CACHE shared variable is in memory. The next time it is invoked it does not have to reload from the database as it is cached.\
\'a0\
The problem with this cache structure is that it doesn\'92t scale. A user trace will show that SELECT scans the table sequentially until it finds a row that satisfies the WHERE clause. As the table grows, the search gets slower. There comes a point when it\'92s faster to drop the cache and go to the database each time. Ref: {\field{\*\fldinst{HYPERLINK "https://www.websphereusergroup.co.uk/wug/presentations/38/EfficientCaching_-V2.pptx.pdf"}}{\fldrslt \cf6 \ul \ulc6 https://www.websphereusergroup.co.uk/wug/presentations/38/EfficientCaching_-V2.pptx.pdf}}\
\'a0\
Whatever is stored in a shared variable is held in cache memory until we refresh the execution group, application or application flow using \'91mqsireload\'92 for example. Other message flows in the same execution group access the shared row variable value set in a message flow.\
\'a0\
Once a cached shared row is populated then every time the flow will run it will only have what was loaded at the time of the SQL query. This means that the underlying database values may change but this won\'92t be reflected.\
In a PROD environment you can\'92t run \'91mqsireload\'92 all the time as that would impact LIVE services. One option is to create a CACHE queue on the queue manager. This could be referenced in the properties of the same flow but in a separate MQ Input node connected to a Compute node. Within the Compute node you can empty the shared row variable:\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f3\fs28 \cf0 SET CACHE = NULL;
\f1\fs32 \
\'a0\
When ESQL code in other compute nodes access the variable, they will see it is empty, which prompts another SELECT against the database.\
\'a0\
You have to use atomic blocks within the same schema to ensure that threads are executed serially (only 1 thread is executed at a time). That way we can update the shared row variable in a thread safe manner.\
\'a0\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clmgf \clvertalt \clshdrawnil \clwWidth5776\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmrg \clvertalt \clshdrawnil \clwWidth5776\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5776\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0
\cf0 shared_atomic_Refresh_Cache.esql\cell 
\pard\intbl\itap1\cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 BEGIN
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 X: BEGIN ATOMIC
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET CacheTable = NULL;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 END X;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 RETURN TRUE;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 END;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2736\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2736\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2736\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0
\cf0 Empties CacheTable\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clmgf \clvertalt \clshdrawnil \clwWidth5776\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmrg \clvertalt \clshdrawnil \clwWidth5776\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5776\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0
\cf0 shared_atomic_Compute.esql\cell 
\pard\intbl\itap1\cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 BEGIN
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 X: BEGIN ATOMIC
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 IF NOT EXISTS(CacheTable.[]) THEN
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET CacheTable.Result[] = PASSTHRU('SELECT R.FIRSTNME,R.LASTNAME FROM EMPLOYEE AS R');
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET OutputRoot.XMLNSC.Data = CacheTable;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ELSE
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET OutputRoot.XMLNSC.Data = CacheTable;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 END IF;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 END X;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 RETURN TRUE;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5345\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 END;
\f1\fs32 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl400 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2736\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2736\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2736\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\ri800\partightenfactor0
\cf0 Both atomic blocks must use the same X label\cell \lastrow\row
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 \'a0\
\'a0\
One advantage of the Global Cache over ESQL shared variables is that the cache can be shared between message flows, integration servers / execution groups, and integration buses / brokers (recall that the scope of ESQL shared variables is the message flow). However, because Global Cache uses the JVM to store data it is slower than shared variables which use cache.\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f0\b\fs36 \cf0 \'a0
\f1\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f0\b\fs36 \cf0 The THE function returns the first element of a list.
\f1\b0\fs32 \

\f0\b\fs36 \'a0
\f1\b0\fs32 \
Syntax\
THE(ListExpression)\
If\'a0
\f6\i \cf8 ListExpression
\f1\i0 \cf0 \'a0contains one or more elements; THE returns the first element of the list. In all other cases, it returns an empty list.\
\'a0\
Restrictions\

\f6\i \cf8 ListExpression
\f1\i0 \cf0 \'a0must be a SELECT expression.\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f0\b\fs36 \cf0 \'a0
\f1\b0\fs32 \
\'a0\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 DATE TIME TRANSFORMATION\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 IBM help "formatting and parsing date times as strings" under help in the toolkit (Search for parsing date and time). How do we interpret date formats?\'a0 12-09-2015 12:05pm. This is called a timestamp as it has a time component\'a0 The first 2 digits are the day in the month. We want to transform to : \uc0\u8232 Month in 3 letters/day in the month with 0 as padding/4 digits year:hours,mins,seconds\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE INDATE CHARACTER '12-09-2015 12:05pm';\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE INDATEFORMAT CHARACTER 'd-MM-yyyy h:mma';\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0--This tells us how to interpret the string in a format IIB understands\
\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE STDDATE TIMESTAMP CAST(INDATE AS TIMESTAMP FORMAT INDATEFORMAT);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0--We have to change it to a standard date using cast\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE OUTDATEFORMAT CHARACTER 'MMM/dd/yyyy:hh,mm,ss';\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE OUTDATE CHARACTER CAST(STDDATE AS CHARACTER FORMAT OUTDATEFORMAT);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 He then deploys the application to the execution group.\'a0 Iibguru then sends a blank message to the IN queue that mqinput node that connects to the esql above to trigger the code. The thread stops at the breakpoint in between. Then he steps into the code, then steps over. He can see the values of the DECLARED variables as they change\'a0\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 INTERVAL DATATYPE\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 How many either days, months, years (up to you) between either 2 timestamps or dates. Uncomment \'97 CALL CopyMessageHeaders(); so that we can send a success message to the out queue.\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE INDATE DATE \'912009-09-17\'92;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'97 The type is DATE not CHARACTER since it is a standard date format. When you run with breakpoints you will observe the variable as INDATE:DATE:java.util.GregorianCalendar[time=12531\'85.] & OUTDATE as 2009-10-17\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE OUTDATE DATE INDATE+INTERVAL \'911\'92 MONTH;\
\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 \uc0\u8232 If you want to see what day this date is:\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE DAYFORMAT CHARACTER \'91EEE\'92;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE DAYNAME CHARACTER CAST(OUTDATE AS CHARACTER FORMAT DAYFORMAT);\
\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 \uc0\u8232 \'97DAYFORMAT is EEE, DAYNAME is Sat \u8232 \'97if DAYFORMAT is EEEE, DAYNAME is Saturday \u8232 \'97if DAYFORMAT is \'91EEEE W\'92, DAYNAME is Saturday 3 where 3 is the 3rd Saturday of that month\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE SUBDATE CHARACTER (CURRENT_DATE-INDATE) YEAR;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'97This will return an interval string not a DATE type. Hence we use CHARACTER not DATE.\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SUBDATE Value is INTERVAL \'918\'92 YEAR\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DECLARE SUBDATE CHARACTER (CURRENT_DATE-INDATE) YEAR TO MONTH;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'97 SUBDATE Value is INTERVAL \'917-09\'92 YEAR TO MONTH\
\'a0\'a0\'a0 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\fs32 \cf0 \'a0\
\pard\pardeftab720\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 If you want the differences in hours then change the INDATE declaration from DATE type to TIMESTAMP type:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE INDATE TIMESTAMP \'912009-09-17 13:53:25\'92;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0You also need to change the SUBDATE to:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 DECLARE SUBDATE CHARACTER (CURRENT_TIMESTAMP-INDATE) HOUR;\
\'a0\'a0\'a0 \
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 Transformation Extender\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 CloudPak is a pack made up of IIB, MQ, WTX, DataPower & API Connect. WTX is coding free transformation but in IIB we can do transformation in 5 coding languages. Data transformation engine at the core of IBM TX. Consider the following data stream for which ITX has an adapter Paul Brett Operations 1/4/1970 \uc0\u8232 The data stream is read into a type tree. Consider this tree to be a type of bucket. This bucket can hold further buckets. This can be transformed into: Paul Brett Operations 1970-04-01 \u8232 The output adapter sends the XML to either MQ, a file or something else. WTX protocol support is less.\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 Message Set, Message definition creation\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 For XML and JSON Message Modelling is optional. But for CSV, Flatfile, EDI, HL7, SWIFT, COBOL etc it is mandatory. Message model schema files are the preferred way to model messages for most data formats. How are you going to create these and implement them as part of the message flow? A request or response message needs to be defined. What are the individual fields or field values contained therein? Parsing is segregating the different parts of the message and interpreting what each part means.\uc0\u8232 A message set can contain 1 or more message definitions. A message set has a unique ID.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 \'a0\
\
\'a0\
\pard\pardeftab720\ri400\sa320\partightenfactor0
\cf0 The message definition defines the field names, data types, delimiters. This definition helps with say a message transformation. Consider the following data 123:raju:detroitCRLF \uc0\u8232 The carriage return, line feed can be seen in Notepad Plus Plus. CRLF appears in Windows, LF appears if created in Linux. \u8232 In IIB Toolkit go to New -> Other -> Message Set. Give it a name of Delimited_ms, give Delimited_msp for the project name. Click next then select the type of message data most appropriate. We choose Text data. Take a note of the next windows message domains (MRM which is the default), wire formats (Text1), and Schemas (None). You will see your newly created messageSet. Change the default wire format to Text1.\
\uc0\u8232 Remember message set ID is different from MQ message ID. The latter is an MQMD (message queue message definition) property. \
\uc0\u8232 You then right click on Message definition -> New -> Other -> Message definition -> Message Definition File\u8232 Click Next and name the file colonseparated_msd. Right click on Elements and Attributes -> create Global element\u8232 The 3 fields combine to make a single record. That record should be given a name and the name added to Types. Add it as a Complex type. In order to tell IIB that ERECORD is a composite of the 3 fields right click on ERECORD then Add Element Reference. \u8232 \u8232 \u8232 You need to go to Properties of ERECORD then select all elements delimited then add colon for delimiter. When you test this using MQInputNode you need to set the correct wire mode else you will get "Invalid Wire format retrieved". This message is a sign that you have not given Broker the correct definitions for it to interpret the text received.\u8232 We need the message definition we created to be referenced correctly in the MQInputNode -> Input Message Parsing. Under Message model it should show you the message set but it does not unless you let the application have access to the MS which is an independent resource. You need to change the applications properties -> Project References -> Choose Delimited_msp. NOW you can select Delimited_ms in the Input Message Parsing. This also allows you to select ERECORD as the Complex message definition. Physical format is the Text1 wire format.\u8232 When you see the Variables under the running thread you will not see the ERECORD Complex type since it has been replaced by the MRM. Any top-level Complex type of a text delimited message definition is going to become MRM. You will see the children of MRM (ENO, ENAME,ECITY).\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 Message Set, Message definition creation for XML\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 In the New Message Set wizard after giving the message Set and project names click Next. Then choose "XML documents" as the type of message data then Next. Wire formats is None and Schemas are None. As ever the next step is to create some message definitions in the same message sets. You can create them from XSD files.\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 IIB Message Definition\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 There is a message definition in your workspace: Delimited_msp.\
Transform colon delimited message to XML message. You need message definitions for both formats. You need XSD to identify incorrectly formed XML messages going through message flows.\uc0\u8232 \u8232 You then right click on Message definition -> New -> Other -> Message definition -> Message Definition File\u8232 Click Next and name the file colonseparated_msd.mxsd. Right click on Elements and Attributes -> create Global element\u8232 The 3 fields combine to make a single record. That record should be given a name and the name added to Types. Add it as a Complex type. In order to tell IIB that ERECORD is a composite of the 3 fields right click on ERECORD then Add Element Reference. \u8232 \u8232 You need to go to Properties of ERECORD then select all elements delimited then add colon for delimiter. When you test this in the MDEXAMPLE_MF.msgflow using MQInputNode you need to set the correct wire mode else you will get "Invalid Wire format retrieved". This message is a sign that you have not given Broker the correct definitions for it to interpret the text received.\u8232 We need the message definition we created to be referenced correctly in the MQInCSV Node -> Input Message Parsing. Under Message model it should show you the message set, but it does not unless you let the application have access to the MS which is an independent resource. You need to change the applications properties -> Project References -> Choose Delimited_msp. NOW you can select Delimited_ms in the Input Message Parsing. This also allows you to select ERECORD as the Complex message definition. Physical format is the Text1 wire format.\u8232 When you see the Variables under the running thread you will not see the ERECORD Complex type since it has been replaced by the MRM. Any top-level Complex type of a text delimited message definition is going to become MRM. You will see the children of MRM (ENO, ENAME, ECITY).\
\pard\pardeftab720\sa360\partightenfactor0

\f0\b\fs36 \cf0 Message modelling\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 Message modelling can be achieved in the message set and definition as above or within the message model as introduced in version 8. The latter is the more advanced concept over message set and definition because you can test your model including performance without deployment. For example, you can model a CSV file. The model should be in a container like a library or an application.\
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 DFDL is a more advanced version of MRM. If you model the data using the Message Set and message definition, then the parser is MRM. However, if you model your data using the Message Model then the parser is DFDL.\
\pard\pardeftab720\ri400\sa320\partightenfactor0
\cf0 If your incoming data contains a header and a trailer, then use record-oriented text in the wizard.\
We saw the transformations with ESQL and the JCN. If you don\'92t want to write a single line of code, then the mapping transformation node helps. However, you cannot do complex transformation using the mapping node. You can only do minimal types of transformations like converting XML to JSON, fields mapping, string values or static values.\
Another difference between modelling and mapping is that the former can be work with an existing message set/definition, but mapping does not.\
Another fundamental point is that generally for XML & JSON 99% of the time we don\'92t model since the description of what the data values mean is already defined. If you are planning on doing the transformation using the mapping node then you need to model the data.\
\pard\pardeftab720\sa360\partightenfactor0

\f0\b\fs36 \cf0 Mapping XML from an XSD\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\b0\fs32 \cf0 The Edetails.xsd file models the data for the incoming XML. It is generated online using an existing XML file as a template. The XSD file validates the XML and also speeds up development of your integration applications by enabling ESQL content assist and graphical maps.\
\'a0\
The MAP_PRO application references the LIB_MODEL we created. When we create a new message model file from the Edetails.xsd file we import it into our workspace library LIB_MODEL.\
\'a0\
When we double click on the mapping node a wizard opens. We choose the \'91Edetails\'92 model as the map inputs and the \'91csvone\'92 model as the map outputs. Click next then choose DFDL as the output domain. This is correct since we created \'91csvone\'92, using DFDL.\
\'a0\
The graphical map opens up.\
\'a0\
\
\'a0\
The root of the left XML message assembly is Edetails. The Edetails [1..1] tells us there is at least one details group. The input XML looks like this.\
\'a0\
\pard\pardeftab720\li960\fi-960\partightenfactor0

\f7\fs26\fsmilli13333 \cf0 <Edetails>
\f1\fs32 \
\pard\pardeftab720\li1360\fi-1360\partightenfactor0

\f7\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0 <Ename>David</Ename>
\f1\fs32 \
\pard\pardeftab720\li960\fi-960\partightenfactor0

\f7\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0 <Eid>478</Eid>
\f1\fs32 \

\f7\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0 <Estate>Juhu</Estate>
\f1\fs32 \
\pard\pardeftab720\li1360\fi-1360\partightenfactor0

\f7\fs26\fsmilli13333 \cf0 \'a0\'a0\'a0 <Ecountry>IN</Ecountry>
\f1\fs32 \
\pard\pardeftab720\li960\fi-960\partightenfactor0

\f7\fs26\fsmilli13333 \cf0 </Edetails>
\f1\fs32 \

\f7\fs26\fsmilli13333 \'a0
\f1\fs32 \
\'a0\
\pard\pardeftab720\partightenfactor0
\cf0 The fields [1..1] means there must be at least one occurrence in the output assembly. But the input assembly does not move any values to those fields. That is why we Assign a dummy value in the Assign Properties -> General -> Value field.\
\'a0\
\pard\pardeftab720\sa360\partightenfactor0

\f0\b\fs36 \cf0 Mapping XML with multiple records from an XSD\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf0 You can edit your mapping so that it has different map inputs and outputs. You can delete the existing input/output using the red cross. From this XML we modelled mulxml.xsd.\
\'a0\
\pard\pardeftab720\ri400\partightenfactor0

\f7\fs28 \cf0 <Empdetail>
\f1\fs32 \
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f7\fs28 \cf0 <Emp>
\f1\fs32 \

\f7\fs28 <Ename>David</Ename>
\f1\fs32 \

\f7\fs28 <Eid>478</Eid>
\f1\fs32 \

\f7\fs28 <Estate>Juhu</Estate>
\f1\fs32 \

\f7\fs28 <Ecountry>IN</Ecountry>
\f1\fs32 \

\f7\fs28 <Eage>35</Eage>
\f1\fs32 \

\f7\fs28 <Egend>m</Egend>
\f1\fs32 \

\f7\fs28 <Edoj>1222</Edoj>
\f1\fs32 \

\f7\fs28 </Emp>
\f1\fs32 \

\f7\fs28 <Emp>
\f1\fs32 \

\f7\fs28 <Ename>Amit</Ename>
\f1\fs32 \

\f7\fs28 <Eid>3269</Eid>
\f1\fs32 \

\f7\fs28 <Estate>Osterley</Estate>
\f1\fs32 \

\f7\fs28 <Ecountry>UK</Ecountry>
\f1\fs32 \

\f7\fs28 <Eage>52</Eage>
\f1\fs32 \

\f7\fs28 <Egend>m</Egend>
\f1\fs32 \

\f7\fs28 <Edoj>1217</Edoj>
\f1\fs32 \

\f7\fs28 </Emp>
\f1\fs32 \
\pard\pardeftab720\partightenfactor0

\f7\fs28 \cf0 </Empdetail>
\f1\fs32 \
\pard\pardeftab720\li960\fi-960\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\partightenfactor0
\cf0 different\
\pard\pardeftab720\li960\fi-960\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 Web Services\
\pard\pardeftab720\ri800\sa360\partightenfactor0

\f1\b0\fs32 \cf0 Synchronous versus Asynchronous. {\field{\*\fldinst{HYPERLINK "https://youtu.be/N5Ky-mz6n-8"}}{\fldrslt \cf6 \ul \ulc6 https://youtu.be/N5Ky-mz6n-8}}
\f0\b\fs36 \

\f1\b0\fs32 SOAP is only XML, but HTTP can handle any format be it XML, JSON, delimited, HL7 etc. SOAP is XML over HTTP or JMS HTTP + SSL = HTTPS but XML uses WS-SEC.
\f0\b\fs36 \

\f1\b0\fs32 HTTPInput listens for a request whereas HTTPReply is responsible for responding to the consumer. HTTPInput listens on a port. There may be multiple web services listening on the same port. To differentiate use the path suffix for the URL
\f0\b\fs36 \

\f1\b0\fs32 mqsireportproperties IIBGURU -e IIBGURU_EX -o HTTPConnector -r
\f0\b\fs36 \

\f1\b0\fs32 HTTPInput can expose the service using different methods (GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS) so you can't expect just to hit with a browser.
\f0\b\fs36 \

\f1\b0\fs32 Because the Transformation node has:
\f0\b\fs36 \

\f1\b0\fs32 SET FNAME=InputRoot.XMLNSC.EMPDET.EFNAME
\f0\b\fs36 \
\pard\pardeftab720\ri1200\sa360\partightenfactor0

\f1\b0\fs32 \cf0 That means we are expecting the payload. GET does not have a payload. Coordination of the millions of requests going through this flow is via the LocalEnvironment -> Destination -> HTTP -> RequestIdentifier (some unique number).
\f0\b\fs36 \
\pard\pardeftab720\ri2000\sa360\partightenfactor0

\f1\b0\fs32 \cf0 In google drive \'91[2020-12-19] IIB ProdConsumeHTTP\'92 the IIB Demo as a consumer and producer calling local HTTP Service and Internet Pokemon.
\f0\b\fs36 \
\pard\pardeftab720\ri400\sa360\partightenfactor0
\cf0 SOAP Gateway mode\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\b0\fs32 \cf0 You can operate SOAP without a WSDL in gateway mode. There are 2 operation modes \'93Specify WSDL interface to expose\'94 & \'93Operate in gateway mode\'94. Operation mode is the manner in which messages are routed by the SOAP Input node. If you choose gateway mode, then Validation is not enabled. In the default mode the WSDL will contain the rules to validate against.\
\'a0\
However even in Gateway mode the SOAP Input won\'92t accept any kind of message; it still expects SOAP format. You will get an \'93Exception during creation of SOAP envelope structure\'94 if your request is not SOAP XML format. This is because the SOAP Input property\'92s Input Message Parsing still has SOAP in the message domain setting even after choosing Gateway mode.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 \'a0\
\pard\pardeftab720\ri400\sa360\partightenfactor0
\cf0 Exposing SOAP webservice. WSDL creation\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 HTML page is human consumable. But a web service is code consumable. Imagine bits of code talking to each other.\uc0\u8232 A web service is either SOAP or more recently REST API. SOAP needs a WSDL file. We also need a message definition to describe the request and response data. Our calculator SOAP service will have a single message definition to define the numbers to be added and the result.\u8232 \u8232 We now need to create a WSDL out of the message definition. Just right click on the mxsd then generate WSDL. \u8232 WSDL (Web Service Description Language) is like an interface. You don't care what happens internally. You only care about how to interface with the service.\u8232 At the upper level WSDL has a service, service has a binding, binding has a port type, port type has an operation, operation has a message then message has a data types. The lowest component is data type which is akin to an XSD.\u8232 You then right click on Message definition -> New -> Other -> Message definition -> Message Definition File\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f0\b\fs36 \cf0 REST
\f1\b0\fs32 \
\pard\pardeftab720\ri800\sa320\partightenfactor0
\cf0 Client <-transfer---Representational Data---transfer>API 
\f8 \uc0\u61664 
\f1  Server\
Below ReqAdd is a resource that is represented by intA & intB and their data types.\
REST is an architectural concept. You are trying to expose HTTP operations with appropriate HTTP methods. The equivalent to the WSDL file is the swagger document. This is where you define the request and response for GET, POST etc. You also define the data types of those elements. The format is mostly JSON since it is the fastest transformation through the layers. COVID data is in JSON. In IIB the swagger is automatically generated but you can import the swagger. IIB version 10 introduced REST API wizard. When you double click the message flow the REST API editor opens. If you right click and open with the message flow editor, you will see an HTTP Input and HTTP Reply nodes either side of a route to label node. As you make changes to the REST API editor the swagger \'93paths" : \{\} gets updated with your operations as well as the message flow.\
\pard\pardeftab720\li800\fi-800\ri800\sa133\partightenfactor0
\cf0 You then create a subflow for the operations in the REST API editor. Add a transformation node (Compute).\

\f3\fs26\fsmilli13333 CAST with CCSID
\f1\fs32 \
You can add a Request schema via the model definition in the REST API editor then you can add one, two and three elements as string.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 But the problem with the specification is that the keys and values, even the number of parameters in your JSON request are not validated even though your model specifically said the parameters have a certain case, are required and are type string. Only thing that is validated is that JSON is proper JSON format
\f0\b \uc0\u8232 
\f1\b0 \
\pard\pardeftab720\ri400\sa320\partightenfactor0
\cf0 \'a0\
\'a0\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 HTTPS webservice\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 IIB you can either consume HTTPS webservice or expose it. HTTPS is a transport layer security. When you are exposing the service, you are the provider. You will have a keystore. When you are consuming you are the client, and you will have a truststore.\uc0\u8232 In ikeyman create a keystore of type JKS called tstore.jks. \u8232 \u8232 (JKS, Java Key Store. You can find this file at sun.security.provider.JavaKeyStore. This keystore is Java specific, it usually has an extension of jks. This type of keystore can contain private keys and certificates, but it cannot be used to store secret keys. Since it's a Java specific keystore, so it cannot be used in other programming languages. The private keys stored in JKS cannot be extracted in Java.)\u8232 The tstore.jks is protected by a password. If we are planning to use tstore.jks as a keystore (since we are the provider) then we choose personal certificate from the ikeyman dropdown. If we are using the file as a truststore (since we are consuming a service) we choose Signer certificates. Consider the following data stream for which ITX has an adapter Paul Brett Operations 1/4/1970 \u8232 The data stream is read into a type tree. Consider this tree to be a type of bucket. This bucket can hold further buckets. This can be transformed into:\
\'a0\
\'a0Paul Brett Operations 1970-04-01 The output adapter sends the XML to either MQ, a file or something else.\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 Java Compute Node\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 IIB 10 uses IBM java which includes oracle java's 1.7 features. IBM Integration Bus v10 ships with Java 8 in IIB 10.0.0.11 and later fix packs on all supported distributed platforms except Solaris and HP. However, the IIB Toolkit is unable to compile Java source code containing Java 8 language constructs such as Functional Interfaces, default and static methods in Interfaces and Lambda Expressions. If you try to deploy a bar file which contains or references Java 8 compiled class files to an IIB node running 10.0.0.10 or earlier then you may see one of the following errors: JavaCompute node with an onInitialize method BIP4157E: The user-defined node 'Java Compute' could not be deployed. Details: java.lang.UnsupportedClassVersionError: JVMCFRE003 bad major version class=Java18Test, offset=6.\uc0\u8232 MbJavaComputeNode is the superclass of all the classes used in JCN. \u8232 \u8232 The Filtering message class in JCN wizard is not aimed for transformation. It can't construct the new message. It is used to check the data without changing it like a filter node, then apply filtering rules.\u8232 JCN template for Java Architecture for XML Binding (JAXB) class relates to marshalling and unmarshalling. Java classes are generated from an XSD. You can create new XML data using the constructor\'92s classes and methods. You can also read newly created XML data.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 When you have finished the template wizard you will see extends MbJavaComputeNode. This superclass is an abstract class. It has abstract methods and concrete methods. Abstract methods that are already implemented can be called in our JCN. With concrete methods are not implemented so we need to implement the declaration. The evaluate method is a concrete method that we need to implement. The evaluate method is akin to the Main method in ESQL\uc0\u8232 \u8232 public void evaluate(MbMessageAssembly inAssembly) throws MbException \{\u8232 CREATE FUNCTION Main() RETURNS BOOLEAN\u8232 \u8232 The MbMessageAssembly is capable of holding the entire logical tree. The logical tree consists of message tree (properties, MQMD, XMLNSC), LocalEnvironment, Environment and ExceptionList \u8232 \u8232 \u8232 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Connect DB JAVA type 4 driver\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 Before we connected using the ODBC driver which is an operating system dependent driver. This is a pure java driver that connects using the Java API calls. The DB vendors like IBM and Oracle will provide the JAR files to connect to their databases. In IIB you need to enable some settings in the Configurable Services. You can make changes that will be registered to the broker. Use the "mqsireportproperties brokerName -c AllTypes -c AllReportableEntityNames -r". From the output you can see the different connectionUrlFormat for DB2, Oracle, MySQL etc.\uc0\u8232 connectionUrlFormat='jdbc:db2://[serverName]:[portNumber]/[databaseName]:user=[user];password=[password];' connectionUrlFormat='jdbc:oracle:thin:[user]/[password]@[serverName]:[portNumber]:[connectionUrlFormatAttr1]'\u8232 JDBCProviders is the Configurable service that we need to Configure. We also need type4DriverClassName='com.ibm.db2.jcc.DB2Driver' which we will reference in the code. This class is available in the DB2 JAR file.\
\pard\pardeftab720\li800\fi-800\ri400\sa133\partightenfactor0
\cf0 You should also tick the exception option in the properties. For example if you are using HTTP then the response will\'a0 contain the error.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 BIP2322E: Database error: SQL State &apos;&apos;IM002&apos;&apos;; Native Error Code &apos;0&apos;; Error Text &apos;&apos;[unixODBC][Driver Manager]Data source name not found and no default driver specified\
\'a0\
\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Design, requirements gathering\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 What questions will you ask? How will you implement these? For example, if you want to expose a web service what kind of notes will you take?\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 MQRFH2 Tree\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\b0\fs32 \cf0 The MQRFH2 header is used to pass messages to and from an integration node that belongs to IBM\'ae Integration Bus. In a message, the MQRFH2 header follows the WebSphere\'ae MQ message descriptor (MQMD) and precedes the message body, if present.\
What is the use of MQRFH2 header? You can pass application data to \ul other\ulnone  flows if the protocol is MQ. In the example below the MQ Output puts a message to a queue called test2. That then triggers another message flow called SecondFlow.msgflow which has an MQ Input to receive the message. You cannot use Environment.Variables.orderPerson when traversing from FirstFlow.msgflow to SecondFlow.msgflow. So how can you pass the data in Environment.Variables.orderPerson?\
In the flow below the environmental variable is not available for the \'93call Service\'94 but is accessible from the compute nodes. The \'91call Service\'92 contains:\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET OutputRoot.XMLNSC.ServiceResponse = InputRootXMLNSC.shiporder.shipto;\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 In the first flow: SET Environment.Variables.orderPerson = InputRoot.XMLNSC.shiporder.orderperson;\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 This variable is then needed in the second flow:\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET OutputRoot.MQRFH2.usr.oPerson = Environment.Variables.orderPerson;\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 Since the Compute1 node has an Out1 \uc0\u8594  HTTP Reply and Out \u8594  MQ Output you need to construct a message for the tree that will go to HTTP Reply & a different message tree that goes to MQ Output.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 CALL CopyMessageHeaders();\
DELETE FIELD OutputRoot.HTPResponseHeader;\
SET OutputRoot.XMLNSC.Acknowledgement = \'91Sent to Downstream\'92;\
PROPAGATE TO TERMINAL \'91out1\'92; --this goes to the HTTP Reply which sends a response to the client that initiated the HTTP request\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 (FYI if you added DELETE NONE to the last ESQL it will not delete the Message Assembly/Logical Tree after propagating)\
------------ Second message assembly being constructed from scratch again\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET OutputRoot.Properties = InputRoot.Properties;\
SET OutputRoot.MQMD = InputRoot.MQMD;\
DELETE FIELD OutputRoot.HTPResponseHeader;\
SET OutputRoot.MQRFH2.usr.oPerson = Environment.Variables.orderPerson;\
SET OutputRoot.MQRFH2.usr.shipto = InputRoot.XMLNSC.ServiceResponse; \'96 this is the response from \'91call Service\'92. This Input Assembly was object was constructed in the \'91call Service\'92.\
RETURN TRUE; \'96 by default means it will propagate to the OUT terminal so no need for an explicit propagate.\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 Once the 2
\fs26\fsmilli13333 \super nd
\fs32 \nosupersub  message assembly reaches the 2
\fs26\fsmilli13333 \super nd
\fs32 \nosupersub  flow via MQ protocol a new Output message assembly is created using the MQRFH2 header values.\
\uc0\u8232 \u8232 Publication Node\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 This node handles publishing to the Topic within MQ. MQ can contain subscriptions that will listen to what is published if the topic string matches.\
\pard\pardeftab720\li400\fi-400\ri400\sa320\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\ri400\sa360\partightenfactor0

\f0\b\fs36 \cf0 Shared vs Static Library.\
\pard\pardeftab720\li400\fi-400\ri400\sa320\partightenfactor0

\f1\b0\fs32 \cf0 What is the difference between a Static and Shared library in IBM Integration Bus? Libraries can't include message flows only subflows. The subflows could take care of say error handling. This is common to many applications. If you deploy an application that references a shared library you see this error BIP1301E: the application cannot be deployed since it references a shared library that has not been deployed to the Integration Server (drag and drop to the Integration Server). But a static library will not complain since it is included in the deployed application.\
\pard\pardeftab720\li1360\fi-1360\ri400\partightenfactor0

\f9\fs26\fsmilli13333 \cf0 \'b7
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 A. Shared libraries may include additional jar files while Static libraries cannot.\

\f9\fs26\fsmilli13333 \'b7
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 B. Shared libraries can be deployed to an Integration Server while Static libraries cannot.\

\f9\fs26\fsmilli13333 \'b7
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 C. Shared libraries encapsulate common code that may be used by multiple applications while Static libraries do not.\

\f9\fs26\fsmilli13333 \'b7
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 D. Multiple applications can reference the same Shared library without having to include the library as part of the build as in the case of Static library.\

\f9\fs26\fsmilli13333 \'b7
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 E. Static library appears under Included Libraries folder. Shared libraries appear under Referenced folder.\
\pard\pardeftab720\sa360\partightenfactor0

\f0\b\fs36 \cf0 BAR override\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\b0\fs32 \cf0 Notes from Udemy Section 12.\
Under Independent resources -> GeneratedBarFiles you can copy the bar file to a folder.\
\'a0\
After extracting the file you can copy lines from the META-INF/broker.xml and create different property files for different environments.\
\'a0\
The line from the broker.xml below:\
\'a0\
<ConfigurableProperty override=\'94HELLO\'94 uri=\'94ExternalVariable#EXTVAR\'94/>\
\'a0\
Can be copied to a new file called DEV.properties\
\'a0\
ExternalVariable#EXTVAR = diffvalue\
\'a0\
Then you can run mqsiapplybaroverride -b <path to desktop>/MAP_PRO.generated.bar -p DEV.properties -k MAP_PRO\
\'a0\
Then go to <path to desktop>/MAP_PRO.generated.bar, copy it, go to the Toolkit, right click on the MAP_PRO application then, paste it. This results in a new BAR folder under the application that contains the new generated BAR file. Click on the new BAR and you will see the new properties in the RHS.\
\'a0\
You can then run this command to deploy the BAR with the new properties.\
\'a0\
$> mqsideploy BROKERNAME -e EG_NAME -a <path to desktop>/MAP_PRO.generated.bar\
\'a0\
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f0\b\fs36 \cf0 Global Cache
\f1\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 One of the most important interview questions.\
\'a0\
Shared variables used to store a temporary variable in Cache available to all message flows in the same broker schema.\
Supposing you want variables to be accessible across schemas. Clearly Shared variables will not help you.\
Global Cache allows you to share variables across schemas AND execution groups or Integration node (broker).\
\'a0\
mqsireportproperties IIBGURU -b cachemanager -o CacheManager -r\
\'a0\
CacheManager\
\'a0 uuid='CacheManager'\
\'a0 policy='disabled'\
\'a0 portRange='2840-2859'\
\'a0 listenerHost=''\
\'a0 shutdownMode='fast'\
\'a0 objectGridCustomFile=''\
\'a0 deploymentPolicyCustomFile=''\
\'a0\
BIP8071I: Successful command completion.\
mqsichangeproperties IIBGURU -b cachemanager -o CacheManager -n policy,portRange,listenerHost -v default,generate,localhost\
\'a0\
This command will only allow variables to be shared within the Integration node (broker) only.\
\'a0\
Two concepts you need to be aware of. Catalog server and container server.\
\'a0\
Suppose I deploy an application in the default Integration server (EG) that will LOAD a variable in Global Cache.\
Note that default is a primary server that contains all the Global Cache variables AKA a Catalog server.\
Imagine that on EG2 I deploy an application that will RETRIEVE a variable in Global Cache.\
EG2 is a container server meaning it will load a local copy of the Global Cache held on the primary EG namely default.\
\'a0\
If I run \'91mqsireload default\'92 then the values present in my Global Cache will be gone because the Global Cache will be reloaded.\
This will also happen if I restart the broker.\
\'a0\
Enabling Global Cache for multiple Integration Nodes (brokers)\
----------------------------------------\
You need a policy.xml file that will contain the names of the nodes. There are some samples under ~/iib-10.0.0.22/server/sample/globalcache.\
\'a0\
You have to run the command for all brokers.\
\'a0\
mqsichangebroker BROKER1 -b <PATH>/policy_two_brokers.xml\
mqsichangebroker BROKER2 -b <PATH>/policy_two_brokers.xml\
\'a0\
mqsichangebroker BROKER2 -b disabled //This will switch it off\
\'a0\
----------------------------------------\
A static method means that it can be accessed without creating an object of the class, unlike public\
We might have different EG accessing an XML in Global Cache. We will need an ESQL code to invoke some JAVA code.\
\pard\pardeftab720\li400\fi-400\ri400\sa320\partightenfactor0

\f0\b\fs36 \cf0 \'a0
\f1\b0\fs32 \
\pard\pardeftab720\ri400\sa320\partightenfactor0

\f0\b\fs36 \cf0 Opaque Parsing
\f1\b0\fs32 \
In your FileNodesExamples your File Input node has an Opaque elements search for //Opaque which means whenever the Opaque element exists (xpath notation). It does not parse the elements inside the Opaque parent. You will just see the child elements as a string value.\

\f0\b\fs36 JCN code to access a message set
\f1\b0\fs32 \
\pard\pardeftab720\ri800\sa320\partightenfactor0
\cf0 In google drive \'93[2021-01-27] IIBFixJCNMulti.mp4\'94 you can access MSET using XPath.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 MbElement root = inAssembly.getMessage().getRootElement().getLastChild().getLastChild();
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 MbElement emp1[]= root.getAllElementsByPath("*");
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 MbElement Root=outAssembly.getMessage().getRootElement().getFirstChild();
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 Root.getFirstElementByPath("./MessageSet").setValue("JCN_CSV_MessageSet");
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 Root.getFirstElementByPath("./MessageType").setValue("\{\}:SDET");
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f10\fs29\fsmilli14667 \cf0 Root.getFirstElementByPath("./MessageFormat").setValue("Text_CSV");
\f1\fs32 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmarl800 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13917\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri1200\sa400\partightenfactor0
\cf0 \'a0\cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf9 \'a0
\f9\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f0\b\fs36 \cf0 Failure and Catch terminals
\f1\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 \cb3 An Exception will roll back to first node (The exception will always be in the last child of the ExceptionList) then it will check if the catch exception is handled or not. If it is then the Message and ExceptionList trees are passed to the node at the end of the catch terminal. The ExceptionList will contain the exception that will give you a better idea of what & where in the flow the problem happened. If there is an exception raised while processing downflow of the Catch then the exception will feedback then traverse the Failure node path only if Transaction Mode is Yes.\cb1 \uc0\u8232 \cb3 If catch is not connected it will check if Failure is connected. Then the default exception and NOT the exception we threw go to the node at the end of the Failure terminal only if Transaction Mode is Yes. The default exception will say you did not handle the Catch. The advantage of the Catch terminal is that you will get an exception which will give you a better idea of what & where in the flow the problem happened.\cb1 \
\cb3 If the format of the input message is not correct, then the flow will traverse the Failure terminal only.\cb1 \uc0\u8232 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f0\b\fs36 \cf0 MQ Failure and Catch
\f1\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 \cb3 When the message that is not handled goes back to the IN queue the message is considered a poison message as it will not allow new messages to leave the queue until the poison message is removed. The poison message can be handled by designating another queue as the backout queue to the IN via MQ Explorer or giving the backout queue name in the flow or setting a DLQ.\cb1 \
\cb3 \'a0\cb1 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f0\b\fs36 \cf0 Propagation
\f1\b0\fs32 \
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f3\fs29\fsmilli14667 \cf0 RETURN TRUE; -- If we forget this statement, the message will still propagate as if it was there 
\fs26\fsmilli13333 to the OUT terminal\
\pard\pardeftab720\li1200\fi-1200\ri1200\sa133\partightenfactor0

\f1\fs32 \cf0 \'a0\
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 PROPAGATE;\
RETURN FALSE; --will do the same.\
\'a0\
PROPAGATE TO TERMINAL \'91out\'92 OR 0;\
RETURN FALSE; --will do the same.\
\'a0\
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Event Monitoring
\f3\b0\fs26\fsmilli13333 \
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 Feature in IIB where we can log some events. These can be categorized as Transactional or Terminal (node terminal). For example, the HTTP Input node has a Monitoring tab under properties. This will allow the node to produce events as messages are processed. Events are published as XML messages that can be subscribed to by other IIB applications. The messages can capture message performance and stats.
\f3\fs26\fsmilli13333 \

\f1\fs32 You can map some key fields from the XML data to a custom app. This data is typically inserted into a database in PROD.
\f3\fs26\fsmilli13333 \

\f1\fs32 You first have to create an MQ queue called MONITOR.EVENTS.DEFAULT. Then create a topic called BROKER_EVENTS_DEFAULT with a Topic String $SYS/Broker/IIBGURU/Monitoring/IIBGURU_EX/<flowname>.
\f3\fs26\fsmilli13333 \
\pard\pardeftab720\ri800\sa133\partightenfactor0

\f1\fs32 \cf0 For an MQ pub/sub broker, the topic root is $SYS/Broker. For example,
\f3\fs26\fsmilli13333 \
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f1\fs32 \cf0 $SYS/Broker/integrationNodeName/Status/ExecutionGroup/integrationServerName
\f3\fs26\fsmilli13333 \

\f1\fs32 \'a0
\f3\fs26\fsmilli13333 \

\f1\fs32 The Topic String is where the event message is going to be put to. Instead of <flowname> you can enter the 
\f7 #
\f1  symbol for all flows. Create an MQ subscription called MONITOR.EVENTS.DEFAULT and select the Topic you just made as well as the queue manager and the queue you just made since you want to receive these publications on an MQ queue.
\f3\fs26\fsmilli13333 \

\f1\fs32 Then configure and enable event monitoring on a message flow. Your event source could be a Transaction start on an HTTP Input node or the end on an HTTP Output node. This information allows us to capture and report message flow performance.
\f3\fs26\fsmilli13333 \

\f1\fs32 Activate broker monitoring events using:
\f3\fs26\fsmilli13333 \
\pard\pardeftab720\li400\fi-400\ri800\sa133\partightenfactor0

\f11\b \cf0 $ mqsichangeflowmonitoring IIBGURU -e IIBGURU_EX -k EvalEmp -f EVAL.PROC.EvalProc -c active
\f3\b0 \
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f11\b \cf0 BIP8071I: Successful command completion.
\f3\b0 \

\f11\b $ mqsireportflowmonitoring IIBGURU -e IIBGURU_EX -k EvalEmp -f EVAL.PROC.EvalProc
\f3\b0 \

\f11\b \'a0
\f3\b0 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\fs32 \cf0 Since the flow is running on a broker that is linked to the queue manager the monitoring is set up. Now when you send a message through your EVAL.PROC.EvalProc flow the monitoring will be triggered to create an event message in XML format on the queue MONITOR.EVENTS.DEFAULT.\
\'a0\
But before that you have to create a flow that will work with the event message. This flow has an MQInput node that has the queue name set to MONITOR.EVENTS.DEFAULT. Then the XML will be passed to the next node to insert into the database.\
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 \'a0\
\pard\pardeftab720\ri400\sa133\partightenfactor0

\f0\b\fs36 \cf0 Set up HTTPS web service
\f3\b0\fs26\fsmilli13333 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\fs32 \cf0 \'a0\
You have to set up SSL in the JVM settings of the integration server via the ComIbmJVMManager object.\
The ikeyman utility allows you to create a keystore database file of type JKS. Call it iibkeystore.jks and provide a password.\
The keystore initially only contains a private key.\
\'a0\
Click on new self-signed certificate with key label personalcert then select it then click on validate. The certificate is contained within the keystore. You then need to associate the keystore with the execution group.\
\'a0\
\pard\pardeftab720\li400\fi-400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiWyMPF9qPvAhW1WxUIHSSSD_cQFjAAegQIBBAD&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSelf-signed_certificate&usg=AOvVaw1ulmEXUANNETSV5MnkQghm"}}{\fldrslt \cf6 \ul \ulc6 https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiWyMPF9qPvAhW1WxUIHSSSD_cQFjAAegQIBBAD&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSelf-signed_certificate&usg=AOvVaw1ulmEXUANNETSV5MnkQghm}}\
\'a0\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clmgf \clvertalt \clshdrawnil \clwWidth3906\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx4320
\clmrg \clvertalt \clshdrawnil \clwWidth3906\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri800\sa133\partightenfactor0
\cf0 Commands to associate keystore with your execution group.
\f3\fs26\fsmilli13333 \cell 
\pard\intbl\itap1\cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth10659\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth10659\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadl144 \clpadr144 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\li400\fi-400\partightenfactor0

\f1\fs32 \cf0 mqsichangeproperties IIBGURU -e IIBGURU_EX -o ComIbmCacheManager -n explicitlySetPort -v 7788\
mqsichangeproperties IIBGURU -e IIBGURU_EX -o ComIbmJVMManager -n keystoreFile -v /home/mqbrkruser/iib-10.0.0.22/MiddlewareGuy/iibkeystore.jks\
mqsichangeproperties IIBGURU -e IIBGURU_EX -o ComIbmJVMManager -n keystoreType -v JKS\
mqsichangeproperties IIBGURU -e IIBGURU_EX -o ComIbmJVMManager -n keystorePass -v defaultKeystore::password\
\'a0\
mqsisetdbparms IIBGURU -n defaultKeystore::password -u ignore -p G8n35hj1\
mqsireload IIBGURU -e IIBGURU_EX\cell \lastrow\row
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 \'a0\
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f0\b\fs36 \cf0 Validation settings for input type nodes
\f1\b0\fs32 \
\'a0\
\pard\pardeftab720\partightenfactor0

\f12\i \cf9 User Trace\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0

\f1\i0 \cf0 Logs all validation failures to the user trace, even if you have not asked for user tracing of the message flow. Use this setting if you want processing of the message to continue regardless of validation failures.\
mqsichangetrace IIBGURU -e IIBGURU_EX -u -l debugTree -c 999999\
mqsireadlog IIBGURU -e IIBGURU_EX -u -o somename.xml\
mqsichangetrace IIBGURU -e IIBGURU_EX -u -l none\
\'a0\
\pard\pardeftab720\partightenfactor0

\f12\i \cf9 Local Error Log\
\pard\pardeftab720\partightenfactor0

\f1\i0 \cf9 Logs all validation failures to the error log (for example, the Event Log on Windows). Use this setting if you want processing of the message to continue regardless of validation failures.
\f12\i \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\i0 \cf0 \'a0\
\pard\pardeftab720\partightenfactor0

\f12\i \cf9 Exception\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\i0 \cf0 The default value. An exception is thrown on the first validation failure encountered. The resulting exception list is shown below. The failure is also logged in the user trace if you have asked for user tracing of the message flow, and validation stops. Use this setting if you want processing of the message to halt as soon as a failure is encountered.\
\'a0\
\pard\pardeftab720\partightenfactor0

\f12\i \cf9 Exception List\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\i0 \cf0 Throws an exception if validation failures are encountered, but only when the current parsing or writing operation has completed. The resulting exception list is shown below. Each failure is also logged in the user trace if you have asked for user tracing of the message flow, and validation stops. Use this setting if you want processing of the message to halt if a validation failure occurs, but you want to see the full list of failures encountered. This property is affected by the Parse Timing property; when partial parsing is selected the current parsing operation parses only a portion of an input message, so only the validation failures in that portion of the message are reported.\
\'a0\
\'a0\
\pard\pardeftab720\sa360\partightenfactor0

\f0\b\fs36 \cf0 ASBITSTREAM in ESQL\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\b0\fs32 \cf0 Converts payload (e.g., XML) into bitstream. Bitstream means a BLOB. A BLOB is a string of hexadecimal characters. The benefit is that you can insert the payload into a database. Another reason is that you may want to cast an XML or JSON into a string.\
\'a0\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET InBlob = ASBITSTREAM(InputRoot.XMLNSC, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId); -- Converts XML to BLOB so that it can be added to the Global Cache\
\pard\pardeftab720\partightenfactor0

\f7\fs24 \cf0 --This statement will convert the XML or JSON tree to string.
\f3\fs26\fsmilli13333 \
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0
\cf0 SET XMLInput = COALESCE( CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID 1208) as CHAR CCSID 1208), ''); SET JSONInput = COALESCE( CAST(ASBITSTREAM(InputRoot.JSON.Data CCSID 1208) as CHAR CCSID 1208), '');\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\fs32 \cf0 Every language has a particular encoding that the operating system can understand. CCSID defines the characters that are allowed (1208 = UTF-8). If you omit the CodedCharSetId then it will still convert fine to a BLOB if your message is using English characters. However if the message contains something unusual like some Cyrillic characters then without CCSID it won\'92t know how to handle the characters.\
\'a0\

\f0\b\fs36 Aggregation
\f1\b0\fs32 \

\f0\b\fs36 \'a0
\f1\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://iteritory.com/ibm-integration-bus-iib-aggregate-nodes-sample-with-http-web-services/"}}{\fldrslt \cf6 \ul \ulc6 https://iteritory.com/ibm-integration-bus-iib-aggregate-nodes-sample-with-http-web-services/}}\
The following JSON message is sent to the REST API /aggregationcustomerapi/v1/customers/.\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f0\b\fs36 \cf0 \'a0
\f1\b0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f6\i\fs36 \cf0 \{\uc0\u8232 \'93CustomerInfoReq\'94: [\u8232 \{\u8232 \'93custId\'94: \'93Amit\'94\u8232 \},\u8232 \{\u8232 \'93custId\'94: \'93Shreya\'94\u8232 \},\'a0\'a0\u8232 \{\u8232 \'93custId\'94: \'93Pete\'94\u8232 \}\u8232 ]\u8232 \}
\f1\i0\fs32 \

\f6\i\fs36 \'a0
\f1\i0\fs32 \

\f6\i\fs36 \'a0
\f1\i0\fs32 \
\pard\pardeftab720\li400\fi-400\partightenfactor0

\fs36 \cf0 \'a0
\fs32 \
The request is sent to a sub flow.\
\'a0\
\
\pard\pardeftab720\li400\fi-400\ri400\sa133\partightenfactor0

\f3\fs26\fsmilli13333 \cf0 SET OutputLocalEnvironment.Destination.HTTP.RequestURL = reqURL || myref.Item[I].custId;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 PROPAGATE TO TERMINAL 'out' DELETE NONE;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SET I = I + 1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 END WHILE;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 RETURN FALSE;\
\'a0\'a0 END;\
\pard\pardeftab720\li400\fi-400\partightenfactor0

\f1\fs32 \cf0 \'a0\
Within the Split compute node, the SET initializes the output buffer.\
\'a0\
By default, the node clears the output message buffer and reclaims the memory when the PROPAGATE statement completes. The PROPAGATE \'85 DELETE NONE will not delete the Message Assembly/Logical Tree after propagating so that the message is available for routing to the next destination. Use DELETE NONE if you want the downstream nodes to be able to see a single instance of output local environment message, and exception list trees.\
\'a0\
Propagation is a synchronous process. That is, the next statement (incrementing the counter in our example) is not executed until all the processing of the message in downstream nodes has completed. So that means the counter \'91I\'92 will be incremented after the {\field{\*\fldinst{HYPERLINK "http://localhost:7080/legacybackendservice/v1/customer/Amit"}}{\fldrslt \cf6 \ul \ulc6 http://localhost:7080/legacybackendservice/v1/customer/Amit}} web service response is sent to the AggregateReply.\
After the while loop completes the return false command is run. This exits the code immediately. Only now will the flow pass on to the AggregateReply node.\
\'a0\
The AggregateReply node creates a folder in the combined message tree below Root, called ComIbmAggregateReplyBody. Below this folder, the node creates a number of subfolders using the names that you set in the AggregateRequest nodes. These subfolders are populated with all associated reply messages.\
\'a0\
\
AggregateControl, AggregateRequest nodes (Used in Fan-Out to broadcast the request message to multiple destinations). The request node records the number of requests.\
\'a0\
AggregateReply (Used in Fan-In to collect responses) \'96 checks if all responses are collected.\
\'a0\
\'92Aggregate Name\'92 property of AggregateControl & AggregateReply nodes should be the same. Our Aggregate Control & AggregateReply nodes have an Aggregate name AGGR.\
\pard\pardeftab720\li400\fi-400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://ibmintegrationbus.wordpress.com/2019/06/14/aggregation-nodes/"}}{\fldrslt \cf6 \ul \ulc6 https://ibmintegrationbus.wordpress.com/2019/06/14/aggregation-nodes/}}\
\'a0\
\pard\pardeftab720\li400\fi-400\ri800\partightenfactor0
\cf0 The \'91Folder Name\'92 property of the AggregateRequest node decide how the input will be structured in Fan-Out flow. We are using RESP. RESP will be an array for multiple responses.\
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\li400\fi-400\ri400\partightenfactor0
\cf0 It combines the generation and concurrent fan-out of a number of related requests with the fan-in of the corresponding replies, and compiles those replies into a single aggregated reply message. IIB as a product makes it easy to implement complex integration scenario with Aggregation support.\
\'a0\
FanOut flows: AggregateRequest and AggregateControl (whenever we use Aggregation control, we must use Aggregation request)\
\pard\pardeftab720\li400\fi-400\partightenfactor0
\cf0 FanIn flow: AggregateReply (it will club the incoming multiple responses) from AggregateControl node and AggregateRequest node.\
\'a0\
Reference: {\field{\*\fldinst{HYPERLINK "https://community.ibm.com/community/user/integration/viewdocument/ibm-integration-bus-for-developers?CommunityKey=77544459-9fda-40da-ae0b-fc8c76f0ce18&tab=librarydocuments"}}{\fldrslt \cf6 \ul \ulc6 https://community.ibm.com/community/user/integration/viewdocument/ibm-integration-bus-for-developers?CommunityKey=77544459-9fda-40da-ae0b-fc8c76f0ce18&tab=librarydocuments}}\
\'a0\
}